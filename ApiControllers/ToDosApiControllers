namespace RetgridCode.Web.Controllers.Api
{
    [RoutePrefix("api/ToDos")]
    public class ToDosApiController : BaseApiController
    {
        IToDosService _toDosService = null;
        public ToDosApiController(IToDosService toDosService)
        {
            _toDosService = toDosService;
        }

        [Route, HttpPost]
        public HttpResponseMessage AddToDos(ToDosAddRequest model)
        {
            if (!ModelState.IsValid && model != null)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
            }

            int id = _toDosService.Insert(model);

            ItemResponse<int> response = new ItemResponse<int>();
            response.Item = id;

            return Request.CreateResponse(HttpStatusCode.OK, response);
        }

        [Route("Edit"), HttpPut]
        public HttpResponseMessage UpdateToDos(ToDosUpdateRequest model)
        {
            if (!ModelState.IsValid)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
            }
            _toDosService.Update(model);
            SuccessResponse response = new SuccessResponse();
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }

        [Route, HttpGet]
        public HttpResponseMessage GetAll()
        {

            ItemsResponse<ToDosDoc> response = new ItemsResponse<ToDosDoc>();
            response.Items = _toDosService.GetAll();
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }

        [Route("{id:int}"), HttpGet]
        public HttpResponseMessage GetById(int id)
        {
            if (!ModelState.IsValid)
            {
                return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);
            }

            ItemResponse<ToDosDoc> response = new ItemResponse<ToDosDoc>();
            response.Item = _toDosService.GetById(id);
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }

        [Route("{id:int}"), HttpDelete]
        public HttpResponseMessage Delete(int id)
        {

            _toDosService.Delete(id);

            SuccessResponse response = new SuccessResponse();
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }

        [Route("route/{caseId:int}")]
        public HttpResponseMessage GetByCaseId(int caseId)
        {
            List<ToDosDoc> list = _toDosService.GetByCaseId(caseId);
            ItemsResponse<ToDosDoc> response = new ItemsResponse<ToDosDoc>();
            response.Items = list;
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }

        [Route("search"), HttpGet]
        public HttpResponseMessage Search([FromUri]ToDosSearchRequest model)
        {

            ItemsResponse<ToDosDoc> response = new ItemsResponse<ToDosDoc>();
            response.Items = _toDosService.Search(model);
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }
    }
}
